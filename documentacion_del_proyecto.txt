### ESQUEMA DE CARPETAS ###
------------
config/
    __init__.py
    __pycache__/
        __init__.cpython-312.pyc
        settings.cpython-312.pyc
        urls.cpython-312.pyc
        wsgi.cpython-312.pyc
    asgi.py
    settings.py
    urls.py
    wsgi.py
documentacion_del_proyecto.txt
employees/
    __init__.py
    __pycache__/
        __init__.cpython-312.pyc
        admin.cpython-312.pyc
        apps.cpython-312.pyc
        forms.cpython-312.pyc
        models.cpython-312.pyc
        urls.cpython-312.pyc
        views.cpython-312.pyc
    admin.py
    apps.py
    forms.py
    migrations/
        0001_initial.py
        0002_initial.py
        0004_alter_employee_reference.py
        003_enable_unaccent.py
        __init__.py
        __pycache__/
            0001_initial.cpython-312.pyc
            0002_employee_user.cpython-312.pyc
            0002_initial.cpython-312.pyc
            0004_alter_employee_reference.cpython-312.pyc
            003_enable_unaccent.cpython-312.pyc
            __init__.cpython-312.pyc
    models.py
    tests.py
    urls.py
    views.py
generate_project_documentation.sh
logs/
    app.log
manage.py
media/
    employees/
        33132450_1859908724068296_3159427601349476352_n.jpg
        58441493_2662038753824427_7473910807835705344_n_1.jpg
        60841145_469478787193178_168842427195457536_n.jpg
        60841145_469478787193178_168842427195457536_n_erysLBI.jpg
        60841145_469478787193178_168842427195457536_n_sHzduQf.jpg
        CONAIP-Logo-web-1.png
        IMG_0580.jpg
        IMG_0580_7jl4JcU.jpg
        IMG_4139.jpg
        Screenshot_2024-05-30_at_2.14.38p.m..png
        Screenshot_2024-05-30_at_2_JpcUad2.14.38p.m..png
        Screenshot_2025-07-10_at_8.44.21p.m..png
        WhatsApp_Image_2024-08-06_at_14.06.05.jpeg
        WhatsApp_Image_2024-08-06_at_14.14.30.jpeg
        aa6c1d88-1820-4575-8c2a-dbcaf0596602.jpg
        aa6c1d88-1820-4575-8c2a-dbcaf0596602_UoTq6Ce.jpg
        blanco_destapado.png
        sutm.jpeg
        sutm.png
        unnamed.jpg
requirements.txt
templates/
    base.html
    dashboard.html
    employees/
        confirm_delete.html
        detail.html
        form.html
        list.html
    registration/
        login.html
        password_reset_complete.html
        password_reset_confirm.html
        password_reset_done.html
        password_reset_email.html
        password_reset_subject.html
users/
    __init__.py
    __pycache__/
        __init__.cpython-312.pyc
        admin.cpython-312.pyc
        apps.cpython-312.pyc
        models.cpython-312.pyc
    admin.py
    apps.py
    migrations/
        0001_initial.py
        __init__.py
        __pycache__/
            0001_initial.cpython-312.pyc
            __init__.cpython-312.pyc
    models.py
    tests.py
    views.py
utils/
    __init__.py
    __pycache__/
        __init__.cpython-312.pyc
        db_functions.cpython-312.pyc
    db_functions.py

### FILE: ./config/asgi.py
------------
"""
ASGI config for config project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

application = get_asgi_application()

### FILE: ./config/settings.py
------------
"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG')

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOST').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'employees',
    'users'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'
ASGI_APPLICATION = 'config.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'aula_admin',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT_URL = BASE_DIR / 'staticfiles/'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOG_DIR = BASE_DIR / 'logs'
LOG_DIR.mkdir(exist_ok=True)
LOG_FILE = LOG_DIR / 'app.log'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'class': 'logging.FileHandler',
            'filename': str(LOG_FILE),
            'formatter': 'verbose',
            'level': 'DEBUG',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['file', 'console'],
        'level': 'INFO',
    },
}

AUTH_USER_MODEL = 'users.CustomUser'

# --- Auth redirects ---
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'login'

# --- Password reset (email) ---
# Para desarrollo: imprime los correos en consola
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'no-reply@aula-admin.local')

# Tiempo de validez del token de reset (1 día)
from datetime import timedelta
PASSWORD_RESET_TIMEOUT = int(timedelta(days=1).total_seconds())

# (OPCIONAL PRODUCCIÓN) Si usarás SMTP en producción, configura .env y descomenta:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = os.getenv('EMAIL_HOST', '')
# EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
# EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
# EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
# EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'

### FILE: ./config/urls.py
------------
"""
URL configuration for config project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.conf import settings
from django.conf.urls.static import static
from django.contrib import admin
from django.urls import include, path
from employees.views import DashboardView

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',DashboardView.as_view(), name='dashboard'),
    path('employees/', include('employees.urls')),
    path('accounts/', include('django.contrib.auth.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

### FILE: ./config/wsgi.py
------------
"""
WSGI config for config project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

application = get_wsgi_application()

### FILE: ./employees/admin.py
------------
from django.contrib import admin

# Register your models here.

### FILE: ./employees/apps.py
------------
from django.apps import AppConfig


class EmployeesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'employees'

### FILE: ./employees/forms.py
------------
# employees/forms.py
from django import forms
from django.db import transaction
from .models import Employee
from users.models import CustomUser
from datetime import date


class EmployeeForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Desactivar HTML required y autocomplete en todos los campos
        for field in self.fields.values():
            field.widget.attrs.pop('required', None)
            field.widget.attrs['autocomplete'] = 'off'

    def clean_reference(self):
        ref = self.cleaned_data.get('reference')
        qs = Employee.objects.filter(reference=ref)
        # Si es edición, excluimos la propia instancia
        if self.instance and self.instance.pk:
            qs = qs.exclude(pk=self.instance.pk)
        if qs.exists():
            raise forms.ValidationError("Esta referencia ya existe.")
        return ref

    def clean_birthdate(self):
        birthdate = self.cleaned_data.get('birthdate')
        if birthdate and birthdate > date.today():
            raise forms.ValidationError("La fecha de nacimiento no puede ser futura.")
        return birthdate

    class Meta:
        model  = Employee
        fields = '__all__'
        widgets = {
            'birthdate': forms.DateInput(attrs={'type': 'date'}),
        }

class EmployeeCreationForm(EmployeeForm):
    email     = forms.EmailField(label='Correo electrónico')
    first_name = forms.CharField(label='Nombre(s)', max_length=30, required=True)
    last_name = forms.CharField(label='Apellidos', max_length=30, required=True)
    password1 = forms.CharField(label='Contraseña', widget=forms.PasswordInput)
    password2 = forms.CharField(label='Confirmar contraseña', widget=forms.PasswordInput)
    is_active  = forms.BooleanField(label='¿Activo?', initial=True, required=False)

    class Meta(EmployeeForm.Meta):
        fields = [
            'email', 'first_name', 'last_name', 'password1', 'is_active',
            'password2','address', 'birthdate', 'commission_general_public',
            'phone_number', 'phone_number_2', 'picture', 'reference'
        ]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['phone_number_2'].required = False

    def clean_password2(self):
        p1 = self.cleaned_data.get('password1')
        p2 = self.cleaned_data.get('password2')
        if p1 and p2 and p1 != p2:
            raise forms.ValidationError("Las contraseñas no coinciden")
        return p2

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if CustomUser.objects.filter(email=email).exists():
            raise forms.ValidationError("Este correo ya está registrado.")
        return email

    @transaction.atomic
    def save(self, commit=True):
        # 1) Crear el usuario
        email = self.cleaned_data['email']
        pwd   = self.cleaned_data['password1']
        is_active = self.cleaned_data.get('is_active', True)
        user  = CustomUser.objects.create_user(email=email, password=pwd, is_active=is_active)

        user.first_name = self.cleaned_data.get('first_name')
        user.last_name = self.cleaned_data.get('last_name')
        user.save()

        # 2) Crear el empleado asociado
        emp = super().save(commit=False)
        emp.user = user
        if commit:
            emp.save()
        return emp


class EmployeeUpdateForm(EmployeeForm):
    # Campos del usuario
    email      = forms.EmailField(label='Correo electrónico')
    first_name = forms.CharField(label='Nombre(s)', max_length=30, required=True)
    last_name  = forms.CharField(label='Apellidos', max_length=30, required=True)
    is_active  = forms.BooleanField(label='¿Activo?', required=False)

    class Meta:
        model = Employee
        # Excluimos el OneToOneField user; lo veremos manualmente
        # exclude = ['user']
        fields = [
            'email', 'first_name', 'last_name', 'address',
            'birthdate', 'commission_general_public', 'is_active',
            'phone_number', 'phone_number_2', 'picture', 'reference'
        ]
        widgets = {
            'birthdate': forms.DateInput(attrs={'type': 'date'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Pre-llenamos los campos del user si ya existe
        if self.instance and self.instance.user:
            self.fields['email'].initial      = self.instance.user.email
            self.fields['first_name'].initial = self.instance.user.first_name
            self.fields['last_name'].initial  = self.instance.user.last_name
            self.fields['is_active'].initial  = self.instance.user.is_active

        self.fields['phone_number_2'].required = False

    @transaction.atomic
    def save(self, commit=True):
        # 1) Guardamos el Employee (sin commitear aún)
        emp = super().save(commit=False)

        # 2) Actualizamos el User relacionado
        user = emp.user
        user.email      = self.cleaned_data['email']
        user.first_name = self.cleaned_data['first_name']
        user.last_name  = self.cleaned_data['last_name']
        user.is_active  = self.cleaned_data.get('is_active', True)
        user.full_clean()
        user.save()

        # 3) Ahora sí guardamos el Employee
        if commit:
            emp.save()
        return emp


class EmployeeSearchForm(forms.Form):
    q       = forms.CharField(
        required=False,
        label='Buscar',
        widget=forms.TextInput(attrs={'placeholder': 'Email, nombre, tel, referencia…', 'autocomplete': 'off'})
    )
    commission_general_public = forms.ChoiceField(
        required=False,
        label='Recibe comisión',
        choices=[
            ('', '-----'),
            ('True', 'Sí'),
            ('False', 'No'),
        ],
        widget=forms.Select
    )
    is_active = forms.ChoiceField(
        required=False,
        label='Activo',
        choices=[
            ('', '-----'),
            ('True', 'Sí'),
            ('False', 'No'),
        ],
        widget=forms.Select
    )

    def clean_commission_general_public(self):
        val = self.cleaned_data.get('commission_general_public')
        if val == '':
            return None
        return val == 'True'

    def clean_is_active(self):
        val = self.cleaned_data.get('is_active')
        if val == '':
            return None
        return val == 'True'

### FILE: ./employees/migrations/0001_initial.py
------------
# Generated by Django 5.2 on 2025-08-04 06:33

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.TextField(verbose_name='Dirección')),
                ('birthdate', models.DateField(verbose_name='Fecha de nacimiento')),
                ('commission_general_public', models.BooleanField(verbose_name='Recibe comisión por público en general')),
                ('phone_number', models.CharField(max_length=10, verbose_name='Número telefónico')),
                ('phone_number_2', models.CharField(max_length=10, null=True, verbose_name='Número telefónico 2')),
                ('picture', models.ImageField(upload_to='employees', verbose_name='Imagen')),
                ('reference', models.CharField(max_length=6, verbose_name='Referencia')),
            ],
            options={
                'verbose_name': 'Empleado',
                'verbose_name_plural': 'Empleados',
            },
        ),
    ]

### FILE: ./employees/migrations/0002_initial.py
------------
# Generated by Django 5.2 on 2025-08-04 06:33

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('employees', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='employee',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='employee', to=settings.AUTH_USER_MODEL, verbose_name='Usuario asociado'),
        ),
    ]

### FILE: ./employees/migrations/0004_alter_employee_reference.py
------------
# Generated by Django 5.2 on 2025-08-04 07:26

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('employees', '003_enable_unaccent'),
    ]

    operations = [
        migrations.AlterField(
            model_name='employee',
            name='reference',
            field=models.CharField(max_length=6, unique=True, verbose_name='Referencia'),
        ),
    ]

### FILE: ./employees/migrations/003_enable_unaccent.py
------------
# employees/migrations/0003_enable_unaccent.py
from django.db import migrations
from django.contrib.postgres.operations import UnaccentExtension

class Migration(migrations.Migration):
    dependencies = [
        ('employees', '0002_initial'),
    ]

    operations = [
        UnaccentExtension(),
    ]

### FILE: ./employees/models.py
------------
from django.conf import settings
from django.db import models, transaction


class Employee(models.Model):
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='employee',
        verbose_name='Usuario asociado'
    )
    address = models.TextField(verbose_name="Dirección")
    birthdate = models.DateField(verbose_name="Fecha de nacimiento")
    commission_general_public = models.BooleanField(verbose_name="Recibe comisión por público en general")
    phone_number = models.CharField(max_length=10, verbose_name="Número telefónico")
    phone_number_2 = models.CharField(max_length=10, null=True, verbose_name="Número telefónico 2")
    picture = models.ImageField(upload_to='employees', verbose_name="Imagen")
    reference = models.CharField(
        max_length=6,
        unique=True,
        verbose_name="Referencia"
    )

    class Meta:
        ordering = ['user__first_name', 'user__last_name']
        verbose_name = "Empleado"
        verbose_name_plural = "Empleados"

    @transaction.atomic
    def delete(self, *args, **kwargs):
        related_user = self.user
        super().delete(*args, **kwargs)
        if related_user:
            related_user.delete()
    # def __str__(self):
    #     cname = self.__class__.__name__
    #     id = self.id
    #     full_name = f"{self.user.first_name} {self.user.last_name}"
    #     return f"<{cname} id={id} full_name={full_name}>"
### FILE: ./employees/tests.py
------------
from django.test import TestCase

# Create your tests here.

### FILE: ./employees/urls.py
------------
from django.urls import path
from .views import (
    EmployeeListView,
    EmployeeCreateView,
    EmployeeUpdateView,
    EmployeeDeleteView,
    EmployeeDetailView
)

app_name = 'employees'

urlpatterns = [
    path('', EmployeeListView.as_view(), name='list'),
    path('new/', EmployeeCreateView.as_view(), name='create'),
    path('view/<int:pk>/', EmployeeDetailView.as_view(), name='detail'),
    path('edit/<int:pk>/', EmployeeUpdateView.as_view(), name='update'),
    path('delete/<int:pk>/', EmployeeDeleteView.as_view(), name='delete'),
]

### FILE: ./employees/views.py
------------
# employees/views.py
import logging
import unicodedata

from django.urls import reverse_lazy
from django.contrib import messages
from django.shortcuts import redirect
from django.db import transaction, IntegrityError
from django.views.generic import ListView, CreateView, UpdateView, DeleteView, DetailView, TemplateView
from django.db.models.functions import Lower
from django.db.models import Q
from django.contrib.auth.mixins import LoginRequiredMixin

from .models import Employee
from .forms import (
    # EmployeeForm,
    EmployeeCreationForm,
    EmployeeUpdateForm,
    EmployeeSearchForm
)
from utils.db_functions import Unaccent  # <<< importamos nuestra función

logger = logging.getLogger(__name__)


class LoggingMixin:
    def dispatch(self, request, *args, **kwargs):
        try:
            return super().dispatch(request, *args, **kwargs)
        except Exception:
            logger.exception("Unhandled exception in %s", self.__class__.__name__)
            raise


class EmployeeListView(LoginRequiredMixin, LoggingMixin, ListView):
    model               = Employee
    template_name       = 'employees/list.html'
    context_object_name = 'employees'
    paginate_by         = 2
    allowed_sort_fields = [
        'user__first_name',
        'user__last_name',
        'reference',
        'user__email'
    ]
    default_ordering = ['user__email']

    def get_queryset(self):
        qs = super().get_queryset().select_related('user')
        self.form = EmployeeSearchForm(self.request.GET)
        if self.form.is_valid():
            q   = self.form.cleaned_data['q']
            com = self.form.cleaned_data['commission_general_public']
            act = self.form.cleaned_data['is_active']

            def normalize(text):
                txt = unicodedata.normalize('NFKD', text or '')
                return ''.join(c for c in txt if not unicodedata.combining(c)).lower()

            q_norm = normalize(q)

            # Anotamos campos sin acentos y en minúsculas
            qs = qs.annotate(
                email_norm=Lower(Unaccent('user__email')),
                fn_norm   =Lower(Unaccent('user__first_name')),
                ln_norm   =Lower(Unaccent('user__last_name')),
                pn1_norm  =Lower(Unaccent('phone_number')),
                pn2_norm  =Lower(Unaccent('phone_number_2')),
                ref_norm  =Lower(Unaccent('reference')),
            )

            if q_norm:
                qs = qs.filter(
                    Q(email_norm__contains=q_norm) |
                    Q(fn_norm__contains=q_norm)    |
                    Q(ln_norm__contains=q_norm)    |
                    Q(pn1_norm__contains=q_norm)   |
                    Q(pn2_norm__contains=q_norm)   |
                    Q(ref_norm__contains=q_norm)
                )

            if com is not None:
                qs = qs.filter(commission_general_public=com)
            if act is not None:
                qs = qs.filter(user__is_active=act)

            ordering = self.request.GET.get('ordering')
            if ordering:
                # permitimos "-campo" o "campo"
                raw = ordering.lstrip('-')
                if raw in self.allowed_sort_fields:
                    qs = qs.order_by(ordering)
                else:
                    qs = qs.order_by(*self.default_ordering)
            else:
                qs = qs.order_by(*self.default_ordering)

        return qs

    # def get_context_data(self, **kwargs):
    #     ctx = super().get_context_data(**kwargs)
    #     ctx['search_form'] = getattr(self, 'form', EmployeeSearchForm())
    #     ctx['get_params'] = self.request.GET.copy()
    #     if 'page' in ctx['get_params']:
    #         ctx['get_params'].pop('page')
    #     return ctx

    # def get_context_data(self, **kwargs):
    #     ctx = super().get_context_data(**kwargs)
    #     ctx['search_form'] = getattr(self, 'form', EmployeeSearchForm())
    #     # Para reconstruir la querystring sin page y sin ordering
    #     params = self.request.GET.copy()
    #     for p in ('page', 'ordering'):
    #         params.pop(p, None)
    #     ctx['get_params'] = params
    #     # guardamos el ordering actual para la plantilla
    #     ctx['current_order'] = self.request.GET.get('ordering', '')
    #     return ctx

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['search_form'] = getattr(self, 'form', EmployeeSearchForm())

        # Tomamos TODOS los GET params excepto 'page'
        params = self.request.GET.copy()
        params.pop('page', None)

        # Lo guardamos en el contexto como string ya codificado
        ctx['querystring'] = params.urlencode()

        # Para saber en la plantilla cuál es el orden actual
        ctx['current_order'] = self.request.GET.get('ordering', '')
        return ctx


class EmployeeCreateView(LoginRequiredMixin, LoggingMixin, CreateView):
    model         = Employee
    form_class    = EmployeeCreationForm
    template_name = 'employees/form.html'
    success_url   = reverse_lazy('employees:list')

    @transaction.atomic
    def form_valid(self, form):
        return super().form_valid(form)

    def form_invalid(self, form):
        logger.error("Create form errors: %s", form.errors)
        return super().form_invalid(form)


class EmployeeUpdateView(LoginRequiredMixin, LoggingMixin, UpdateView):
    model         = Employee
    form_class    = EmployeeUpdateForm
    template_name = 'employees/form.html'
    success_url   = reverse_lazy('employees:list')

    def form_invalid(self, form):
        logger.error("Update form errors: %s", form.errors)
        return super().form_invalid(form)


class EmployeeDeleteView(LoginRequiredMixin, LoggingMixin, DeleteView):
    model         = Employee
    template_name = 'employees/confirm_delete.html'
    success_url   = reverse_lazy('employees:list')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        # 'object' es el Employee; le añadimos también su CustomUser
        context['user'] = self.object.user
        return context

    @transaction.atomic
    def post(self, request, *args, **kwargs):
        try:
            self.object = self.get_object()
            self.object.delete()
            messages.success(request, "Empleado eliminado correctamente.")
        except IntegrityError as e:
            logger.error("Error al eliminar empleado")
            messages.error(request, "No se pudo eliminar el empleado.")
        return redirect(self.success_url)


class EmployeeDetailView(LoginRequiredMixin, LoggingMixin, DetailView):
    model           = Employee
    template_name   = 'employees/detail.html'
    context_object_name = 'employee'

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        # Añadimos el usuario en contexto (opcionalmente)
        ctx['user'] = self.object.user
        return ctx

class DashboardView(LoginRequiredMixin, LoggingMixin, TemplateView):
    template_name = 'dashboard.html'

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx['total_empleados'] = Employee.objects.count()
        return ctx

### FILE: ./manage.py
------------
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

### FILE: ./users/admin.py
------------
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import CustomUser

@admin.register(CustomUser)
class CustomUserAdmin(UserAdmin):
    model = CustomUser
    list_display = ('email', 'is_staff', 'is_active')
    ordering = ('email',)
    fieldsets = (
        (None, {'fields': ('email','password')}),
        ('Permisos', {'fields': ('is_staff','is_active','is_superuser','groups','user_permissions')}),
        ('Fechas',  {'fields': ('date_joined',)}),
    )
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('email','password1','password2','is_staff','is_active'),
        }),
    )
    search_fields = ('email',)

### FILE: ./users/apps.py
------------
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'

### FILE: ./users/migrations/0001_initial.py
------------
# Generated by Django 5.2 on 2025-08-04 06:33

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Correo electrónico')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='Nombre(s)')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='Apellidos')),
                ('is_active', models.BooleanField(default=True, verbose_name='¿Activo?')),
                ('is_staff', models.BooleanField(default=False, verbose_name='¿Staff?')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Fecha de registro')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'usuario',
                'verbose_name_plural': 'usuarios',
            },
        ),
    ]

### FILE: ./users/models.py
------------
from django.db import models
from django.contrib.auth.models import (
    AbstractBaseUser, PermissionsMixin, BaseUserManager
)
from django.utils import timezone

class CustomUserManager(BaseUserManager):
    """Manager para CustomUser usando email como identificador."""
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("El email es obligatorio")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(email, password, **extra_fields)

class CustomUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField('Correo electrónico', unique=True, max_length=255)
    first_name = models.CharField('Nombre(s)', max_length=30, blank=True)
    last_name = models.CharField('Apellidos', max_length=30, blank=True)
    is_active = models.BooleanField('¿Activo?', default=True)
    is_staff  = models.BooleanField('¿Staff?', default=False)
    date_joined = models.DateTimeField('Fecha de registro', default=timezone.now)

    objects = CustomUserManager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []  # email ya es obligatorio

    class Meta:
        verbose_name = 'usuario'
        verbose_name_plural = 'usuarios'

    def __str__(self):
        return self.email

### FILE: ./users/tests.py
------------
from django.test import TestCase

# Create your tests here.

### FILE: ./users/views.py
------------
from django.shortcuts import render

# Create your views here.

### FILE: ./utils/db_functions.py
------------
# utils/db_functions.py
from django.db.models import Func, TextField

class Unaccent(Func):
    """
    Funcion UNACCENT de PostgreSQL para quitar acentos.
    Uso: annotate(field_unaccent=Unaccent('campo'))
    """
    function = 'unaccent'
    output_field = TextField()

